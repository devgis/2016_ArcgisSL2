//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 14.0.23107.0
// 
namespace MobileApp.MyService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Info", Namespace="http://schemas.datacontract.org/2004/07/SilverlightGIS.Common")]
    public partial class Info : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AuthorField;
        
        private string ContentField;
        
        private string IDField;
        
        private double POSXField;
        
        private double POSYField;
        
        private System.DateTime TimeField;
        
        private string TitleField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Author {
            get {
                return this.AuthorField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorField, value) != true)) {
                    this.AuthorField = value;
                    this.RaisePropertyChanged("Author");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double POSX {
            get {
                return this.POSXField;
            }
            set {
                if ((this.POSXField.Equals(value) != true)) {
                    this.POSXField = value;
                    this.RaisePropertyChanged("POSX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double POSY {
            get {
                return this.POSYField;
            }
            set {
                if ((this.POSYField.Equals(value) != true)) {
                    this.POSYField = value;
                    this.RaisePropertyChanged("POSY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrackInfo", Namespace="http://schemas.datacontract.org/2004/07/SilverlightGIS.Common")]
    public partial class TrackInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string IDField;
        
        private double POSXField;
        
        private double POSYField;
        
        private System.DateTime TrackTimeField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double POSX {
            get {
                return this.POSXField;
            }
            set {
                if ((this.POSXField.Equals(value) != true)) {
                    this.POSXField = value;
                    this.RaisePropertyChanged("POSX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double POSY {
            get {
                return this.POSYField;
            }
            set {
                if ((this.POSYField.Equals(value) != true)) {
                    this.POSYField = value;
                    this.RaisePropertyChanged("POSY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TrackTime {
            get {
                return this.TrackTimeField;
            }
            set {
                if ((this.TrackTimeField.Equals(value) != true)) {
                    this.TrackTimeField = value;
                    this.RaisePropertyChanged("TrackTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MyService.IDBService")]
    public interface IDBService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBService/GetInfoList", ReplyAction="http://tempuri.org/IDBService/GetInfoListResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<MobileApp.MyService.Info>> GetInfoListAsync(string Where);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBService/AddInfo", ReplyAction="http://tempuri.org/IDBService/AddInfoResponse")]
        System.Threading.Tasks.Task<bool> AddInfoAsync(MobileApp.MyService.Info info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBService/EditInfo", ReplyAction="http://tempuri.org/IDBService/EditInfoResponse")]
        System.Threading.Tasks.Task<bool> EditInfoAsync(MobileApp.MyService.Info info);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBService/DeleteInfo", ReplyAction="http://tempuri.org/IDBService/DeleteInfoResponse")]
        System.Threading.Tasks.Task<bool> DeleteInfoAsync(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBService/GetTrackList", ReplyAction="http://tempuri.org/IDBService/GetTrackListResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<MobileApp.MyService.TrackInfo>> GetTrackListAsync(string Where);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBService/AddTrackInfo", ReplyAction="http://tempuri.org/IDBService/AddTrackInfoResponse")]
        System.Threading.Tasks.Task<bool> AddTrackInfoAsync(MobileApp.MyService.TrackInfo trackInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBService/DeleteTrackInfo", ReplyAction="http://tempuri.org/IDBService/DeleteTrackInfoResponse")]
        System.Threading.Tasks.Task<bool> DeleteTrackInfoAsync(string ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBService/AddUser", ReplyAction="http://tempuri.org/IDBService/AddUserResponse")]
        System.Threading.Tasks.Task<bool> AddUserAsync(string UserName, string UserPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBService/EditUser", ReplyAction="http://tempuri.org/IDBService/EditUserResponse")]
        System.Threading.Tasks.Task<bool> EditUserAsync(string UserName, string UserPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBService/CheckUser", ReplyAction="http://tempuri.org/IDBService/CheckUserResponse")]
        System.Threading.Tasks.Task<bool> CheckUserAsync(string UserName, string UserPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBService/UserExists", ReplyAction="http://tempuri.org/IDBService/UserExistsResponse")]
        System.Threading.Tasks.Task<bool> UserExistsAsync(string UserName, string UserPassword);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDBServiceChannel : MobileApp.MyService.IDBService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DBServiceClient : System.ServiceModel.ClientBase<MobileApp.MyService.IDBService>, MobileApp.MyService.IDBService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public DBServiceClient() : 
                base(DBServiceClient.GetDefaultBinding(), DBServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IDBService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DBServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(DBServiceClient.GetBindingForEndpoint(endpointConfiguration), DBServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DBServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(DBServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DBServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(DBServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DBServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<MobileApp.MyService.Info>> GetInfoListAsync(string Where) {
            return base.Channel.GetInfoListAsync(Where);
        }
        
        public System.Threading.Tasks.Task<bool> AddInfoAsync(MobileApp.MyService.Info info) {
            return base.Channel.AddInfoAsync(info);
        }
        
        public System.Threading.Tasks.Task<bool> EditInfoAsync(MobileApp.MyService.Info info) {
            return base.Channel.EditInfoAsync(info);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteInfoAsync(string ID) {
            return base.Channel.DeleteInfoAsync(ID);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<MobileApp.MyService.TrackInfo>> GetTrackListAsync(string Where) {
            return base.Channel.GetTrackListAsync(Where);
        }
        
        public System.Threading.Tasks.Task<bool> AddTrackInfoAsync(MobileApp.MyService.TrackInfo trackInfo) {
            return base.Channel.AddTrackInfoAsync(trackInfo);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTrackInfoAsync(string ID) {
            return base.Channel.DeleteTrackInfoAsync(ID);
        }
        
        public System.Threading.Tasks.Task<bool> AddUserAsync(string UserName, string UserPassword) {
            return base.Channel.AddUserAsync(UserName, UserPassword);
        }
        
        public System.Threading.Tasks.Task<bool> EditUserAsync(string UserName, string UserPassword) {
            return base.Channel.EditUserAsync(UserName, UserPassword);
        }
        
        public System.Threading.Tasks.Task<bool> CheckUserAsync(string UserName, string UserPassword) {
            return base.Channel.CheckUserAsync(UserName, UserPassword);
        }
        
        public System.Threading.Tasks.Task<bool> UserExistsAsync(string UserName, string UserPassword) {
            return base.Channel.UserExistsAsync(UserName, UserPassword);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IDBService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IDBService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:14001/DBService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return DBServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IDBService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return DBServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IDBService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IDBService,
        }
    }
}
