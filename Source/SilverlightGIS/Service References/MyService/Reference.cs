//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace SilverlightGIS.MyService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Info", Namespace="http://schemas.datacontract.org/2004/07/SilverlightGIS.Common")]
    public partial class Info : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AuthorField;
        
        private string ContentField;
        
        private string IDField;
        
        private double POSXField;
        
        private double POSYField;
        
        private System.DateTime TimeField;
        
        private string TitleField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Author {
            get {
                return this.AuthorField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorField, value) != true)) {
                    this.AuthorField = value;
                    this.RaisePropertyChanged("Author");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double POSX {
            get {
                return this.POSXField;
            }
            set {
                if ((this.POSXField.Equals(value) != true)) {
                    this.POSXField = value;
                    this.RaisePropertyChanged("POSX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double POSY {
            get {
                return this.POSYField;
            }
            set {
                if ((this.POSYField.Equals(value) != true)) {
                    this.POSYField = value;
                    this.RaisePropertyChanged("POSY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrackInfo", Namespace="http://schemas.datacontract.org/2004/07/SilverlightGIS.Common")]
    public partial class TrackInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string IDField;
        
        private double POSXField;
        
        private double POSYField;
        
        private System.DateTime TrackTimeField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ID {
            get {
                return this.IDField;
            }
            set {
                if ((object.ReferenceEquals(this.IDField, value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double POSX {
            get {
                return this.POSXField;
            }
            set {
                if ((this.POSXField.Equals(value) != true)) {
                    this.POSXField = value;
                    this.RaisePropertyChanged("POSX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double POSY {
            get {
                return this.POSYField;
            }
            set {
                if ((this.POSYField.Equals(value) != true)) {
                    this.POSYField = value;
                    this.RaisePropertyChanged("POSY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TrackTime {
            get {
                return this.TrackTimeField;
            }
            set {
                if ((this.TrackTimeField.Equals(value) != true)) {
                    this.TrackTimeField = value;
                    this.RaisePropertyChanged("TrackTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserInfo", Namespace="http://schemas.datacontract.org/2004/07/SilverlightGIS.Common")]
    public partial class UserInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string UserIDField;
        
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIDField, value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MyService.IDBService")]
    public interface IDBService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDBService/GetInfoList", ReplyAction="http://tempuri.org/IDBService/GetInfoListResponse")]
        System.IAsyncResult BeginGetInfoList(string Where, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.Info> EndGetInfoList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDBService/AddInfo", ReplyAction="http://tempuri.org/IDBService/AddInfoResponse")]
        System.IAsyncResult BeginAddInfo(SilverlightGIS.MyService.Info info, System.AsyncCallback callback, object asyncState);
        
        bool EndAddInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDBService/EditInfo", ReplyAction="http://tempuri.org/IDBService/EditInfoResponse")]
        System.IAsyncResult BeginEditInfo(SilverlightGIS.MyService.Info info, System.AsyncCallback callback, object asyncState);
        
        bool EndEditInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDBService/DeleteInfo", ReplyAction="http://tempuri.org/IDBService/DeleteInfoResponse")]
        System.IAsyncResult BeginDeleteInfo(string ID, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDBService/GetTrackList", ReplyAction="http://tempuri.org/IDBService/GetTrackListResponse")]
        System.IAsyncResult BeginGetTrackList(string Where, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.TrackInfo> EndGetTrackList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDBService/AddTrackInfo", ReplyAction="http://tempuri.org/IDBService/AddTrackInfoResponse")]
        System.IAsyncResult BeginAddTrackInfo(SilverlightGIS.MyService.TrackInfo trackInfo, System.AsyncCallback callback, object asyncState);
        
        bool EndAddTrackInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDBService/DeleteTrackInfo", ReplyAction="http://tempuri.org/IDBService/DeleteTrackInfoResponse")]
        System.IAsyncResult BeginDeleteTrackInfo(string ID, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteTrackInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDBService/AddUser", ReplyAction="http://tempuri.org/IDBService/AddUserResponse")]
        System.IAsyncResult BeginAddUser(string UserName, string UserPassword, string PNO, double PAGE, double age, string POSITION, System.AsyncCallback callback, object asyncState);
        
        bool EndAddUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDBService/EditUser", ReplyAction="http://tempuri.org/IDBService/EditUserResponse")]
        System.IAsyncResult BeginEditUser(string UserName, string UserPassword, System.AsyncCallback callback, object asyncState);
        
        bool EndEditUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDBService/CheckUser", ReplyAction="http://tempuri.org/IDBService/CheckUserResponse")]
        System.IAsyncResult BeginCheckUser(string UserName, string UserPassword, System.AsyncCallback callback, object asyncState);
        
        bool EndCheckUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDBService/UserExists", ReplyAction="http://tempuri.org/IDBService/UserExistsResponse")]
        System.IAsyncResult BeginUserExists(string UserName, string UserPassword, System.AsyncCallback callback, object asyncState);
        
        bool EndUserExists(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDBService/GetUserINFO", ReplyAction="http://tempuri.org/IDBService/GetUserINFOResponse")]
        System.IAsyncResult BeginGetUserINFO(string where, System.AsyncCallback callback, object asyncState);
        
        string EndGetUserINFO(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDBService/GetUserList", ReplyAction="http://tempuri.org/IDBService/GetUserListResponse")]
        System.IAsyncResult BeginGetUserList(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.UserInfo> EndGetUserList(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDBServiceChannel : SilverlightGIS.MyService.IDBService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetInfoListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetInfoListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.Info> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.Info>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTrackListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTrackListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.TrackInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.TrackInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddTrackInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddTrackInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteTrackInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteTrackInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EditUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EditUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UserExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserINFOCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserINFOCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.UserInfo> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.UserInfo>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DBServiceClient : System.ServiceModel.ClientBase<SilverlightGIS.MyService.IDBService>, SilverlightGIS.MyService.IDBService {
        
        private BeginOperationDelegate onBeginGetInfoListDelegate;
        
        private EndOperationDelegate onEndGetInfoListDelegate;
        
        private System.Threading.SendOrPostCallback onGetInfoListCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddInfoDelegate;
        
        private EndOperationDelegate onEndAddInfoDelegate;
        
        private System.Threading.SendOrPostCallback onAddInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditInfoDelegate;
        
        private EndOperationDelegate onEndEditInfoDelegate;
        
        private System.Threading.SendOrPostCallback onEditInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteInfoDelegate;
        
        private EndOperationDelegate onEndDeleteInfoDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTrackListDelegate;
        
        private EndOperationDelegate onEndGetTrackListDelegate;
        
        private System.Threading.SendOrPostCallback onGetTrackListCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddTrackInfoDelegate;
        
        private EndOperationDelegate onEndAddTrackInfoDelegate;
        
        private System.Threading.SendOrPostCallback onAddTrackInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteTrackInfoDelegate;
        
        private EndOperationDelegate onEndDeleteTrackInfoDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteTrackInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddUserDelegate;
        
        private EndOperationDelegate onEndAddUserDelegate;
        
        private System.Threading.SendOrPostCallback onAddUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginEditUserDelegate;
        
        private EndOperationDelegate onEndEditUserDelegate;
        
        private System.Threading.SendOrPostCallback onEditUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckUserDelegate;
        
        private EndOperationDelegate onEndCheckUserDelegate;
        
        private System.Threading.SendOrPostCallback onCheckUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginUserExistsDelegate;
        
        private EndOperationDelegate onEndUserExistsDelegate;
        
        private System.Threading.SendOrPostCallback onUserExistsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserINFODelegate;
        
        private EndOperationDelegate onEndGetUserINFODelegate;
        
        private System.Threading.SendOrPostCallback onGetUserINFOCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserListDelegate;
        
        private EndOperationDelegate onEndGetUserListDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserListCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public DBServiceClient() {
        }
        
        public DBServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DBServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DBServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DBServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<GetInfoListCompletedEventArgs> GetInfoListCompleted;
        
        public event System.EventHandler<AddInfoCompletedEventArgs> AddInfoCompleted;
        
        public event System.EventHandler<EditInfoCompletedEventArgs> EditInfoCompleted;
        
        public event System.EventHandler<DeleteInfoCompletedEventArgs> DeleteInfoCompleted;
        
        public event System.EventHandler<GetTrackListCompletedEventArgs> GetTrackListCompleted;
        
        public event System.EventHandler<AddTrackInfoCompletedEventArgs> AddTrackInfoCompleted;
        
        public event System.EventHandler<DeleteTrackInfoCompletedEventArgs> DeleteTrackInfoCompleted;
        
        public event System.EventHandler<AddUserCompletedEventArgs> AddUserCompleted;
        
        public event System.EventHandler<EditUserCompletedEventArgs> EditUserCompleted;
        
        public event System.EventHandler<CheckUserCompletedEventArgs> CheckUserCompleted;
        
        public event System.EventHandler<UserExistsCompletedEventArgs> UserExistsCompleted;
        
        public event System.EventHandler<GetUserINFOCompletedEventArgs> GetUserINFOCompleted;
        
        public event System.EventHandler<GetUserListCompletedEventArgs> GetUserListCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightGIS.MyService.IDBService.BeginGetInfoList(string Where, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetInfoList(Where, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.Info> SilverlightGIS.MyService.IDBService.EndGetInfoList(System.IAsyncResult result) {
            return base.Channel.EndGetInfoList(result);
        }
        
        private System.IAsyncResult OnBeginGetInfoList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Where = ((string)(inValues[0]));
            return ((SilverlightGIS.MyService.IDBService)(this)).BeginGetInfoList(Where, callback, asyncState);
        }
        
        private object[] OnEndGetInfoList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.Info> retVal = ((SilverlightGIS.MyService.IDBService)(this)).EndGetInfoList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetInfoListCompleted(object state) {
            if ((this.GetInfoListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetInfoListCompleted(this, new GetInfoListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetInfoListAsync(string Where) {
            this.GetInfoListAsync(Where, null);
        }
        
        public void GetInfoListAsync(string Where, object userState) {
            if ((this.onBeginGetInfoListDelegate == null)) {
                this.onBeginGetInfoListDelegate = new BeginOperationDelegate(this.OnBeginGetInfoList);
            }
            if ((this.onEndGetInfoListDelegate == null)) {
                this.onEndGetInfoListDelegate = new EndOperationDelegate(this.OnEndGetInfoList);
            }
            if ((this.onGetInfoListCompletedDelegate == null)) {
                this.onGetInfoListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetInfoListCompleted);
            }
            base.InvokeAsync(this.onBeginGetInfoListDelegate, new object[] {
                        Where}, this.onEndGetInfoListDelegate, this.onGetInfoListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightGIS.MyService.IDBService.BeginAddInfo(SilverlightGIS.MyService.Info info, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddInfo(info, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightGIS.MyService.IDBService.EndAddInfo(System.IAsyncResult result) {
            return base.Channel.EndAddInfo(result);
        }
        
        private System.IAsyncResult OnBeginAddInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SilverlightGIS.MyService.Info info = ((SilverlightGIS.MyService.Info)(inValues[0]));
            return ((SilverlightGIS.MyService.IDBService)(this)).BeginAddInfo(info, callback, asyncState);
        }
        
        private object[] OnEndAddInfo(System.IAsyncResult result) {
            bool retVal = ((SilverlightGIS.MyService.IDBService)(this)).EndAddInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddInfoCompleted(object state) {
            if ((this.AddInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddInfoCompleted(this, new AddInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddInfoAsync(SilverlightGIS.MyService.Info info) {
            this.AddInfoAsync(info, null);
        }
        
        public void AddInfoAsync(SilverlightGIS.MyService.Info info, object userState) {
            if ((this.onBeginAddInfoDelegate == null)) {
                this.onBeginAddInfoDelegate = new BeginOperationDelegate(this.OnBeginAddInfo);
            }
            if ((this.onEndAddInfoDelegate == null)) {
                this.onEndAddInfoDelegate = new EndOperationDelegate(this.OnEndAddInfo);
            }
            if ((this.onAddInfoCompletedDelegate == null)) {
                this.onAddInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddInfoCompleted);
            }
            base.InvokeAsync(this.onBeginAddInfoDelegate, new object[] {
                        info}, this.onEndAddInfoDelegate, this.onAddInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightGIS.MyService.IDBService.BeginEditInfo(SilverlightGIS.MyService.Info info, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditInfo(info, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightGIS.MyService.IDBService.EndEditInfo(System.IAsyncResult result) {
            return base.Channel.EndEditInfo(result);
        }
        
        private System.IAsyncResult OnBeginEditInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SilverlightGIS.MyService.Info info = ((SilverlightGIS.MyService.Info)(inValues[0]));
            return ((SilverlightGIS.MyService.IDBService)(this)).BeginEditInfo(info, callback, asyncState);
        }
        
        private object[] OnEndEditInfo(System.IAsyncResult result) {
            bool retVal = ((SilverlightGIS.MyService.IDBService)(this)).EndEditInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditInfoCompleted(object state) {
            if ((this.EditInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditInfoCompleted(this, new EditInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditInfoAsync(SilverlightGIS.MyService.Info info) {
            this.EditInfoAsync(info, null);
        }
        
        public void EditInfoAsync(SilverlightGIS.MyService.Info info, object userState) {
            if ((this.onBeginEditInfoDelegate == null)) {
                this.onBeginEditInfoDelegate = new BeginOperationDelegate(this.OnBeginEditInfo);
            }
            if ((this.onEndEditInfoDelegate == null)) {
                this.onEndEditInfoDelegate = new EndOperationDelegate(this.OnEndEditInfo);
            }
            if ((this.onEditInfoCompletedDelegate == null)) {
                this.onEditInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditInfoCompleted);
            }
            base.InvokeAsync(this.onBeginEditInfoDelegate, new object[] {
                        info}, this.onEndEditInfoDelegate, this.onEditInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightGIS.MyService.IDBService.BeginDeleteInfo(string ID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteInfo(ID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightGIS.MyService.IDBService.EndDeleteInfo(System.IAsyncResult result) {
            return base.Channel.EndDeleteInfo(result);
        }
        
        private System.IAsyncResult OnBeginDeleteInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ID = ((string)(inValues[0]));
            return ((SilverlightGIS.MyService.IDBService)(this)).BeginDeleteInfo(ID, callback, asyncState);
        }
        
        private object[] OnEndDeleteInfo(System.IAsyncResult result) {
            bool retVal = ((SilverlightGIS.MyService.IDBService)(this)).EndDeleteInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteInfoCompleted(object state) {
            if ((this.DeleteInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteInfoCompleted(this, new DeleteInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteInfoAsync(string ID) {
            this.DeleteInfoAsync(ID, null);
        }
        
        public void DeleteInfoAsync(string ID, object userState) {
            if ((this.onBeginDeleteInfoDelegate == null)) {
                this.onBeginDeleteInfoDelegate = new BeginOperationDelegate(this.OnBeginDeleteInfo);
            }
            if ((this.onEndDeleteInfoDelegate == null)) {
                this.onEndDeleteInfoDelegate = new EndOperationDelegate(this.OnEndDeleteInfo);
            }
            if ((this.onDeleteInfoCompletedDelegate == null)) {
                this.onDeleteInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteInfoCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteInfoDelegate, new object[] {
                        ID}, this.onEndDeleteInfoDelegate, this.onDeleteInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightGIS.MyService.IDBService.BeginGetTrackList(string Where, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTrackList(Where, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.TrackInfo> SilverlightGIS.MyService.IDBService.EndGetTrackList(System.IAsyncResult result) {
            return base.Channel.EndGetTrackList(result);
        }
        
        private System.IAsyncResult OnBeginGetTrackList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Where = ((string)(inValues[0]));
            return ((SilverlightGIS.MyService.IDBService)(this)).BeginGetTrackList(Where, callback, asyncState);
        }
        
        private object[] OnEndGetTrackList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.TrackInfo> retVal = ((SilverlightGIS.MyService.IDBService)(this)).EndGetTrackList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTrackListCompleted(object state) {
            if ((this.GetTrackListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTrackListCompleted(this, new GetTrackListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTrackListAsync(string Where) {
            this.GetTrackListAsync(Where, null);
        }
        
        public void GetTrackListAsync(string Where, object userState) {
            if ((this.onBeginGetTrackListDelegate == null)) {
                this.onBeginGetTrackListDelegate = new BeginOperationDelegate(this.OnBeginGetTrackList);
            }
            if ((this.onEndGetTrackListDelegate == null)) {
                this.onEndGetTrackListDelegate = new EndOperationDelegate(this.OnEndGetTrackList);
            }
            if ((this.onGetTrackListCompletedDelegate == null)) {
                this.onGetTrackListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTrackListCompleted);
            }
            base.InvokeAsync(this.onBeginGetTrackListDelegate, new object[] {
                        Where}, this.onEndGetTrackListDelegate, this.onGetTrackListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightGIS.MyService.IDBService.BeginAddTrackInfo(SilverlightGIS.MyService.TrackInfo trackInfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddTrackInfo(trackInfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightGIS.MyService.IDBService.EndAddTrackInfo(System.IAsyncResult result) {
            return base.Channel.EndAddTrackInfo(result);
        }
        
        private System.IAsyncResult OnBeginAddTrackInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            SilverlightGIS.MyService.TrackInfo trackInfo = ((SilverlightGIS.MyService.TrackInfo)(inValues[0]));
            return ((SilverlightGIS.MyService.IDBService)(this)).BeginAddTrackInfo(trackInfo, callback, asyncState);
        }
        
        private object[] OnEndAddTrackInfo(System.IAsyncResult result) {
            bool retVal = ((SilverlightGIS.MyService.IDBService)(this)).EndAddTrackInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddTrackInfoCompleted(object state) {
            if ((this.AddTrackInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddTrackInfoCompleted(this, new AddTrackInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddTrackInfoAsync(SilverlightGIS.MyService.TrackInfo trackInfo) {
            this.AddTrackInfoAsync(trackInfo, null);
        }
        
        public void AddTrackInfoAsync(SilverlightGIS.MyService.TrackInfo trackInfo, object userState) {
            if ((this.onBeginAddTrackInfoDelegate == null)) {
                this.onBeginAddTrackInfoDelegate = new BeginOperationDelegate(this.OnBeginAddTrackInfo);
            }
            if ((this.onEndAddTrackInfoDelegate == null)) {
                this.onEndAddTrackInfoDelegate = new EndOperationDelegate(this.OnEndAddTrackInfo);
            }
            if ((this.onAddTrackInfoCompletedDelegate == null)) {
                this.onAddTrackInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddTrackInfoCompleted);
            }
            base.InvokeAsync(this.onBeginAddTrackInfoDelegate, new object[] {
                        trackInfo}, this.onEndAddTrackInfoDelegate, this.onAddTrackInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightGIS.MyService.IDBService.BeginDeleteTrackInfo(string ID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteTrackInfo(ID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightGIS.MyService.IDBService.EndDeleteTrackInfo(System.IAsyncResult result) {
            return base.Channel.EndDeleteTrackInfo(result);
        }
        
        private System.IAsyncResult OnBeginDeleteTrackInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ID = ((string)(inValues[0]));
            return ((SilverlightGIS.MyService.IDBService)(this)).BeginDeleteTrackInfo(ID, callback, asyncState);
        }
        
        private object[] OnEndDeleteTrackInfo(System.IAsyncResult result) {
            bool retVal = ((SilverlightGIS.MyService.IDBService)(this)).EndDeleteTrackInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteTrackInfoCompleted(object state) {
            if ((this.DeleteTrackInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteTrackInfoCompleted(this, new DeleteTrackInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteTrackInfoAsync(string ID) {
            this.DeleteTrackInfoAsync(ID, null);
        }
        
        public void DeleteTrackInfoAsync(string ID, object userState) {
            if ((this.onBeginDeleteTrackInfoDelegate == null)) {
                this.onBeginDeleteTrackInfoDelegate = new BeginOperationDelegate(this.OnBeginDeleteTrackInfo);
            }
            if ((this.onEndDeleteTrackInfoDelegate == null)) {
                this.onEndDeleteTrackInfoDelegate = new EndOperationDelegate(this.OnEndDeleteTrackInfo);
            }
            if ((this.onDeleteTrackInfoCompletedDelegate == null)) {
                this.onDeleteTrackInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteTrackInfoCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteTrackInfoDelegate, new object[] {
                        ID}, this.onEndDeleteTrackInfoDelegate, this.onDeleteTrackInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightGIS.MyService.IDBService.BeginAddUser(string UserName, string UserPassword, string PNO, double PAGE, double age, string POSITION, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddUser(UserName, UserPassword, PNO, PAGE, age, POSITION, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightGIS.MyService.IDBService.EndAddUser(System.IAsyncResult result) {
            return base.Channel.EndAddUser(result);
        }
        
        private System.IAsyncResult OnBeginAddUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string UserName = ((string)(inValues[0]));
            string UserPassword = ((string)(inValues[1]));
            string PNO = ((string)(inValues[2]));
            double PAGE = ((double)(inValues[3]));
            double age = ((double)(inValues[4]));
            string POSITION = ((string)(inValues[5]));
            return ((SilverlightGIS.MyService.IDBService)(this)).BeginAddUser(UserName, UserPassword, PNO, PAGE, age, POSITION, callback, asyncState);
        }
        
        private object[] OnEndAddUser(System.IAsyncResult result) {
            bool retVal = ((SilverlightGIS.MyService.IDBService)(this)).EndAddUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddUserCompleted(object state) {
            if ((this.AddUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddUserCompleted(this, new AddUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddUserAsync(string UserName, string UserPassword, string PNO, double PAGE, double age, string POSITION) {
            this.AddUserAsync(UserName, UserPassword, PNO, PAGE, age, POSITION, null);
        }
        
        public void AddUserAsync(string UserName, string UserPassword, string PNO, double PAGE, double age, string POSITION, object userState) {
            if ((this.onBeginAddUserDelegate == null)) {
                this.onBeginAddUserDelegate = new BeginOperationDelegate(this.OnBeginAddUser);
            }
            if ((this.onEndAddUserDelegate == null)) {
                this.onEndAddUserDelegate = new EndOperationDelegate(this.OnEndAddUser);
            }
            if ((this.onAddUserCompletedDelegate == null)) {
                this.onAddUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddUserCompleted);
            }
            base.InvokeAsync(this.onBeginAddUserDelegate, new object[] {
                        UserName,
                        UserPassword,
                        PNO,
                        PAGE,
                        age,
                        POSITION}, this.onEndAddUserDelegate, this.onAddUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightGIS.MyService.IDBService.BeginEditUser(string UserName, string UserPassword, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEditUser(UserName, UserPassword, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightGIS.MyService.IDBService.EndEditUser(System.IAsyncResult result) {
            return base.Channel.EndEditUser(result);
        }
        
        private System.IAsyncResult OnBeginEditUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string UserName = ((string)(inValues[0]));
            string UserPassword = ((string)(inValues[1]));
            return ((SilverlightGIS.MyService.IDBService)(this)).BeginEditUser(UserName, UserPassword, callback, asyncState);
        }
        
        private object[] OnEndEditUser(System.IAsyncResult result) {
            bool retVal = ((SilverlightGIS.MyService.IDBService)(this)).EndEditUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEditUserCompleted(object state) {
            if ((this.EditUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EditUserCompleted(this, new EditUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EditUserAsync(string UserName, string UserPassword) {
            this.EditUserAsync(UserName, UserPassword, null);
        }
        
        public void EditUserAsync(string UserName, string UserPassword, object userState) {
            if ((this.onBeginEditUserDelegate == null)) {
                this.onBeginEditUserDelegate = new BeginOperationDelegate(this.OnBeginEditUser);
            }
            if ((this.onEndEditUserDelegate == null)) {
                this.onEndEditUserDelegate = new EndOperationDelegate(this.OnEndEditUser);
            }
            if ((this.onEditUserCompletedDelegate == null)) {
                this.onEditUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEditUserCompleted);
            }
            base.InvokeAsync(this.onBeginEditUserDelegate, new object[] {
                        UserName,
                        UserPassword}, this.onEndEditUserDelegate, this.onEditUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightGIS.MyService.IDBService.BeginCheckUser(string UserName, string UserPassword, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckUser(UserName, UserPassword, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightGIS.MyService.IDBService.EndCheckUser(System.IAsyncResult result) {
            return base.Channel.EndCheckUser(result);
        }
        
        private System.IAsyncResult OnBeginCheckUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string UserName = ((string)(inValues[0]));
            string UserPassword = ((string)(inValues[1]));
            return ((SilverlightGIS.MyService.IDBService)(this)).BeginCheckUser(UserName, UserPassword, callback, asyncState);
        }
        
        private object[] OnEndCheckUser(System.IAsyncResult result) {
            bool retVal = ((SilverlightGIS.MyService.IDBService)(this)).EndCheckUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckUserCompleted(object state) {
            if ((this.CheckUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckUserCompleted(this, new CheckUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckUserAsync(string UserName, string UserPassword) {
            this.CheckUserAsync(UserName, UserPassword, null);
        }
        
        public void CheckUserAsync(string UserName, string UserPassword, object userState) {
            if ((this.onBeginCheckUserDelegate == null)) {
                this.onBeginCheckUserDelegate = new BeginOperationDelegate(this.OnBeginCheckUser);
            }
            if ((this.onEndCheckUserDelegate == null)) {
                this.onEndCheckUserDelegate = new EndOperationDelegate(this.OnEndCheckUser);
            }
            if ((this.onCheckUserCompletedDelegate == null)) {
                this.onCheckUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckUserCompleted);
            }
            base.InvokeAsync(this.onBeginCheckUserDelegate, new object[] {
                        UserName,
                        UserPassword}, this.onEndCheckUserDelegate, this.onCheckUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightGIS.MyService.IDBService.BeginUserExists(string UserName, string UserPassword, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUserExists(UserName, UserPassword, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool SilverlightGIS.MyService.IDBService.EndUserExists(System.IAsyncResult result) {
            return base.Channel.EndUserExists(result);
        }
        
        private System.IAsyncResult OnBeginUserExists(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string UserName = ((string)(inValues[0]));
            string UserPassword = ((string)(inValues[1]));
            return ((SilverlightGIS.MyService.IDBService)(this)).BeginUserExists(UserName, UserPassword, callback, asyncState);
        }
        
        private object[] OnEndUserExists(System.IAsyncResult result) {
            bool retVal = ((SilverlightGIS.MyService.IDBService)(this)).EndUserExists(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUserExistsCompleted(object state) {
            if ((this.UserExistsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UserExistsCompleted(this, new UserExistsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UserExistsAsync(string UserName, string UserPassword) {
            this.UserExistsAsync(UserName, UserPassword, null);
        }
        
        public void UserExistsAsync(string UserName, string UserPassword, object userState) {
            if ((this.onBeginUserExistsDelegate == null)) {
                this.onBeginUserExistsDelegate = new BeginOperationDelegate(this.OnBeginUserExists);
            }
            if ((this.onEndUserExistsDelegate == null)) {
                this.onEndUserExistsDelegate = new EndOperationDelegate(this.OnEndUserExists);
            }
            if ((this.onUserExistsCompletedDelegate == null)) {
                this.onUserExistsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUserExistsCompleted);
            }
            base.InvokeAsync(this.onBeginUserExistsDelegate, new object[] {
                        UserName,
                        UserPassword}, this.onEndUserExistsDelegate, this.onUserExistsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightGIS.MyService.IDBService.BeginGetUserINFO(string where, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserINFO(where, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SilverlightGIS.MyService.IDBService.EndGetUserINFO(System.IAsyncResult result) {
            return base.Channel.EndGetUserINFO(result);
        }
        
        private System.IAsyncResult OnBeginGetUserINFO(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string where = ((string)(inValues[0]));
            return ((SilverlightGIS.MyService.IDBService)(this)).BeginGetUserINFO(where, callback, asyncState);
        }
        
        private object[] OnEndGetUserINFO(System.IAsyncResult result) {
            string retVal = ((SilverlightGIS.MyService.IDBService)(this)).EndGetUserINFO(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserINFOCompleted(object state) {
            if ((this.GetUserINFOCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserINFOCompleted(this, new GetUserINFOCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserINFOAsync(string where) {
            this.GetUserINFOAsync(where, null);
        }
        
        public void GetUserINFOAsync(string where, object userState) {
            if ((this.onBeginGetUserINFODelegate == null)) {
                this.onBeginGetUserINFODelegate = new BeginOperationDelegate(this.OnBeginGetUserINFO);
            }
            if ((this.onEndGetUserINFODelegate == null)) {
                this.onEndGetUserINFODelegate = new EndOperationDelegate(this.OnEndGetUserINFO);
            }
            if ((this.onGetUserINFOCompletedDelegate == null)) {
                this.onGetUserINFOCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserINFOCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserINFODelegate, new object[] {
                        where}, this.onEndGetUserINFODelegate, this.onGetUserINFOCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverlightGIS.MyService.IDBService.BeginGetUserList(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserList(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.UserInfo> SilverlightGIS.MyService.IDBService.EndGetUserList(System.IAsyncResult result) {
            return base.Channel.EndGetUserList(result);
        }
        
        private System.IAsyncResult OnBeginGetUserList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverlightGIS.MyService.IDBService)(this)).BeginGetUserList(callback, asyncState);
        }
        
        private object[] OnEndGetUserList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.UserInfo> retVal = ((SilverlightGIS.MyService.IDBService)(this)).EndGetUserList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserListCompleted(object state) {
            if ((this.GetUserListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserListCompleted(this, new GetUserListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserListAsync() {
            this.GetUserListAsync(null);
        }
        
        public void GetUserListAsync(object userState) {
            if ((this.onBeginGetUserListDelegate == null)) {
                this.onBeginGetUserListDelegate = new BeginOperationDelegate(this.OnBeginGetUserList);
            }
            if ((this.onEndGetUserListDelegate == null)) {
                this.onEndGetUserListDelegate = new EndOperationDelegate(this.OnEndGetUserList);
            }
            if ((this.onGetUserListCompletedDelegate == null)) {
                this.onGetUserListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserListCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserListDelegate, null, this.onEndGetUserListDelegate, this.onGetUserListCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SilverlightGIS.MyService.IDBService CreateChannel() {
            return new DBServiceClientChannel(this);
        }
        
        private class DBServiceClientChannel : ChannelBase<SilverlightGIS.MyService.IDBService>, SilverlightGIS.MyService.IDBService {
            
            public DBServiceClientChannel(System.ServiceModel.ClientBase<SilverlightGIS.MyService.IDBService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetInfoList(string Where, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = Where;
                System.IAsyncResult _result = base.BeginInvoke("GetInfoList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.Info> EndGetInfoList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.Info> _result = ((System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.Info>)(base.EndInvoke("GetInfoList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddInfo(SilverlightGIS.MyService.Info info, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = info;
                System.IAsyncResult _result = base.BeginInvoke("AddInfo", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditInfo(SilverlightGIS.MyService.Info info, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = info;
                System.IAsyncResult _result = base.BeginInvoke("EditInfo", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndEditInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("EditInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteInfo(string ID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ID;
                System.IAsyncResult _result = base.BeginInvoke("DeleteInfo", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndDeleteInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("DeleteInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTrackList(string Where, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = Where;
                System.IAsyncResult _result = base.BeginInvoke("GetTrackList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.TrackInfo> EndGetTrackList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.TrackInfo> _result = ((System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.TrackInfo>)(base.EndInvoke("GetTrackList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddTrackInfo(SilverlightGIS.MyService.TrackInfo trackInfo, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = trackInfo;
                System.IAsyncResult _result = base.BeginInvoke("AddTrackInfo", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddTrackInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddTrackInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteTrackInfo(string ID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ID;
                System.IAsyncResult _result = base.BeginInvoke("DeleteTrackInfo", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndDeleteTrackInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("DeleteTrackInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddUser(string UserName, string UserPassword, string PNO, double PAGE, double age, string POSITION, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[6];
                _args[0] = UserName;
                _args[1] = UserPassword;
                _args[2] = PNO;
                _args[3] = PAGE;
                _args[4] = age;
                _args[5] = POSITION;
                System.IAsyncResult _result = base.BeginInvoke("AddUser", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndAddUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("AddUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginEditUser(string UserName, string UserPassword, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = UserName;
                _args[1] = UserPassword;
                System.IAsyncResult _result = base.BeginInvoke("EditUser", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndEditUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("EditUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCheckUser(string UserName, string UserPassword, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = UserName;
                _args[1] = UserPassword;
                System.IAsyncResult _result = base.BeginInvoke("CheckUser", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndCheckUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("CheckUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUserExists(string UserName, string UserPassword, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = UserName;
                _args[1] = UserPassword;
                System.IAsyncResult _result = base.BeginInvoke("UserExists", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndUserExists(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("UserExists", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserINFO(string where, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = where;
                System.IAsyncResult _result = base.BeginInvoke("GetUserINFO", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetUserINFO(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetUserINFO", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserList(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetUserList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.UserInfo> EndGetUserList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.UserInfo> _result = ((System.Collections.ObjectModel.ObservableCollection<SilverlightGIS.MyService.UserInfo>)(base.EndInvoke("GetUserList", _args, result)));
                return _result;
            }
        }
    }
}
